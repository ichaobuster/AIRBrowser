<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark ToggleButton component.  

@see spark.components.ToggleButton

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
				   minWidth="200" minHeight="35" 
				   alpha.disabledStates="0.5" >
	<fx:Metadata>
		[HostComponent("spark.components.ButtonBarButton")]
	</fx:Metadata>
	
	
	
	<fx:Script fb:purpose="styling">
        
		<![CDATA[
			private var cornerRadius:Number = 2;
			
			import spark.components.ButtonBarButton;
			
			
			/* Define the skin elements that should not be colorized. 
			For toggle button, the graphics are colorized but the label is not. */
			static private const exclusions:Array = ["labelDisplay"];
			
			/**
			 * @private
			 */    
			override public function get colorizeExclusions():Array {return exclusions;}
			
			/**
			 * @private
			 */
			override protected function initializationComplete():void
			{
				useChromeColor = true;
				super.initializationComplete();
			}
			
			/**
			 * @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
			{
				var cr:Number = getStyle("cornerRadius");
				
				if (cornerRadius != cr)
				{
					cornerRadius = cr;
				}
				
				if(Object(hostComponent).itemIndex == 0){
					path.data="M180.1 0 20.1 0Q14.7 0 11.8 2.5 10.35 3.75 10 5L0 32 200 32 190 5Q189.75 3.75 188.35 2.5 185.65 0 180.1 0Z"; 
				}
//				var msgNum:Number = Object(hostComponent).msgNum ;
//				if(isNaN(msgNum) || msgNum <=0 ){
//					numTip.visible = false;
//					numTip.includeInLayout = false;
//				}else if(currentState == "upAndSelected"
//					|| currentState == "overAndSelected"
//					|| currentState == "downAndSelected"
//					|| currentState == "disabledAndSelected"){
//					numTip.visible = false;
//					numTip.includeInLayout = false;
//				}else{
//					numTip.visible = true;
//					numTip.includeInLayout = true;
//					numTip.text = Object(hostComponent).msgNum;
//				}
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
			
		]]>
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" stateGroups="overStates" />
		<s:State name="down" stateGroups="downStates" />
		<s:State name="disabled" stateGroups="disabledStates" />
		<s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
		<s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
		<s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
		<s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
	</s:states>
	<s:Path id="path" bottom="-1" data="M 188.35 2.5 Q 185.65 0 180.1 0 L 20.1 0 Q 14.7 0 11.8 2.5 10.35 3.75 10 5 L 20 32 200 32 190 5 Q 189.75 3.75 188.35 2.5 Z"
			data.selectedStates="M 180.1 0 20.1 0 Q 14.7 0 11.8 2.5 10.35 3.75 10 5 L 0 32 200 32 190 5 Q 189.75 3.75 188.35 2.5 185.65 0 180.1 0 Z" >
		<s:stroke>
			<s:SolidColorStroke color="#EEEEEE"
								color.selectedStates="#017ccc" weight="1"/>
		</s:stroke>
		<s:fill>
			<s:SolidColor color.selectedStates="#017ccc"
						  color="#FFFFFF"/>
		</s:fill>
	</s:Path>
	
	<!-- layer 8: text -->
	<!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
	<!--<s:HGroup id="hgrp"  width="100%" height="100%" 
			  left="0" right="0" top="0" bottom="-1" 
			  paddingLeft="10" paddingRight="10" paddingTop="2"
			  horizontalAlign="center" verticalAlign="middle" 
			  gap="10">-->
		<s:Label id="labelDisplay"
				 left="10" right="52"
				 verticalCenter="2"
				 textAlign="center"
				 verticalAlign="middle"
				 maxDisplayedLines="1"
				 color.over="#007CC9"
				 color.selectedStates="#FFFFFF"
				 horizontalCenter="0">
		</s:Label>
		<s:Image id="closeButton"
				 right="15"
				 verticalCenter="2"
				 source="@Embed('assets/img/deleteInput.png')"
				 buttonMode="true"
				 mouseChildren="false"
				 visible="false"
				 useHandCursor="true"/>
	<!--</s:HGroup>-->
</s:SparkButtonSkin>
